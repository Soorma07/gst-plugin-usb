Index: src/configure.ac
===================================================================
--- src.orig/configure.ac	2011-09-05 10:54:17.146471283 -0600
+++ src/configure.ac	2011-09-05 10:54:47.546496580 -0600
@@ -86,5 +86,25 @@
 GST_PLUGIN_LDFLAGS='-module -avoid-version -export-symbols-regex [_]*\(gst_\|Gst\|GST_\).*'
 AC_SUBST(GST_PLUGIN_LDFLAGS)
 
+dnl Erase this section if you are not interested in 
+dnl allocating memory with CMEM
+
+AC_ARG_WITH(dvsdk,
+  [AS_HELP_STRING([--with-dvsdk=<path to dvsdk with Rules.make file>],
+       [Path to a DVSDK with a Rules.make file (dvsdk 4 and up)])],
+       [dvsdk=$withval]
+)
+
+if test "x$dvsdk" = "x" || ! test -f $dvsdk/Rules.make ; then
+    AC_MSG_ERROR([Unable to find a valid Rules.make (DVSDK no provided or path is invalid)]);
+else
+    AC_MSG_NOTICE([Rules.make file found at: $dvsdk/Rules.make]);
+fi
+
+AC_SUBST([RULES_MAKE],["$dvsdk/Rules.make"])
+AC_SUBST([PLATFORMDEFS],[platformdefs.inc])
+
+dnl End of CMEM section
+
 AC_OUTPUT
 
Index: src/src/Makefile.am
===================================================================
--- src.orig/src/Makefile.am	2011-09-05 10:54:17.134905182 -0600
+++ src/src/Makefile.am	2011-09-05 10:54:47.546496580 -0600
@@ -10,15 +10,39 @@
 
 
 # compiler and linker flags used to compile this plugin, set in configure.ac
-libgstusb_la_CFLAGS = $(GST_CFLAGS) $(LIBUSB_CFLAGS)
+libgstusb_la_CFLAGS = $(GST_CFLAGS) $(LIBUSB_CFLAGS) $(shell cat cmem/compiler.opt)
 libgstusb_la_LIBADD = $(GST_LIBS) $(LIBUSB_LIBS)
-libgstusb_la_LDFLAGS = $(GST_PLUGIN_LDFLAGS)
+libgstusb_la_LDFLAGS = $(GST_PLUGIN_LDFLAGS) -Wl,cmem/linker.cmd
 libgstusb_la_LIBTOOLFLAGS = --tag=disable-static
 
 # headers we need but don't want installed
 noinst_HEADERS = gstusbsrc.h gstusbsink.h usbstring.h usbhost.h usbgadget.h\
  usbgadget_descriptors.h
 
+EXTRA_DIST = *.cfg
+
+#################################################
+# Delete this section if you are not interested #
+# in allocation memory with CMEM                #
+#################################################
+# XDC Configuration
+CONFIGURO     = $(XDC_INSTALL_DIR)/xs xdc.tools.configuro
+BUILT_SOURCES = cmem/compiler.opt cmem/linker.cmd
+export XDCPATH  = $(XDC_INSTALL_DIR)/packages;$(LINK_INSTALL_DIR);$(FC_INSTALL_DIR)/packages;$(CE_INSTALL_DIR)/packages;$(XDAIS_INSTALL_DIR)/packages;$(CODEC_INSTALL_DIR)/pack
+
+XDC_PLATFORM=undefined_xdc_platform
+XDC_TARGET=undefined_xdc_target
+export CSTOOL_PREFIX
+
+include @PLATFORMDEFS@
+
+%/compiler.opt %/linker.cmd : %.cfg
+       $(CONFIGURO) -c $(CSTOOL_PATH) -o cmem -t $(XDC_TARGET) -p $(XDC_PLATFORM) -b config.bld $<
+
+#################################################
+#              End of CMEM section              #
+#################################################
+
 
 clean-local:
 	-rm -rf cmem
\ No newline at end of file
Index: src/src/gstusbsrc.c
===================================================================
--- src.orig/src/gstusbsrc.c	2011-09-05 10:54:17.126864702 -0600
+++ src/src/gstusbsrc.c	2011-09-05 10:55:59.771876039 -0600
@@ -2,7 +2,7 @@
  * Copyright (C) 2011 RidgeRun
  *
  */
-
+#define USE_DSP 
 #define DPOINT printf("Debug point %s %d\n", __FUNCTION__, __LINE__)
 
 #ifdef HAVE_CONFIG_H
@@ -13,6 +13,12 @@
 #include <pthread.h>
 #include <string.h>
 
+#ifdef USE_DSP
+  #include <xdc/std.h>
+  #include <ti/sdo/ce/CERuntime.h>
+  #include <ti/sdo/ce/osal/Memory.h>
+#endif
+
 #include "gstusbsrc.h"
 
 
@@ -59,6 +65,10 @@
 static gboolean gst_usb_src_send_caps(GstUsbSrc *s, GstCaps *caps);
 static GstCaps *gst_usb_src_receive_caps(GstUsbSrc *s);
 
+#ifdef USE_DSP
+static void gst_usb_src_free_buffer(guint8 *buffer);
+#endif
+
 /* GObject vmethod implementations */
 
 static void
@@ -224,6 +234,9 @@
     return FALSE;
   }	
 
+  #ifdef USE_DSP
+  CERuntime_init();
+  #endif
   GST_USB_SRC_STATE_UNLOCK(s);
   g_free(notification);
   return TRUE;
@@ -301,6 +314,13 @@
   *buf = gst_dp_buffer_from_header (size[0], header);
   data = GST_BUFFER_DATA(*buf);
   /* Now read the data */
+#ifdef USE_DSP
+  /* if DSP is to be used then allocate memory from CMEM */
+  g_free(data);
+  data = Memory_contigAlloc((*buf)->size, 8);
+  GST_BUFFER_MALLOCDATA(*buf) = (guint8 *)*buf;
+  GST_BUFFER_FREE_FUNC(*buf) = (void *)gst_usb_src_free_buffer;
+#endif
 
   /* Ask for the header */
   if ((ret=usb_gadget_transfer (s->gadget,
@@ -308,8 +328,11 @@
                                (unsigned char *) data, 
     	                       (*buf)->size)) != GAD_EOK)	
   {	
-
+    #ifdef USE_DSP
+    Memory_contigFree(data);
+    #else
     g_free(data);
+    #endif
     g_free(size);
     g_free(header);
     PRINTERR(ret,s)
@@ -605,4 +628,11 @@
   return ret;
 }
 
+#ifdef USE_DSP
+void gst_usb_src_free_buffer(guint8 *buffer)
+{
+    GstBuffer *gBuf = (GstBuffer *)buffer;
+    Memory_contigFree(GST_BUFFER_DATA(gBuf), GST_BUFFER_SIZE(gBuf));	
+}
+#endif
 
